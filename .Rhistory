ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot2(data = mpg, aes(x = displ, y = hwy)) + geom_point()
library(ggplot2)
ggplot2(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
data(mpg, package = 'ggplot2')
head(mpg)
data(mpg, package = 'ggplot2')
help('data')
#data(mpg, package = 'ggplot2')
head(mpg)
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
#data(mpg, package = 'ggplot2')
head(mpg)
help(mpg)
data()
help('data')
head(msleep)
print(seq_len(25))
"(x<-5)"
x
x<-5
z
x
example_vector <- c(1, 2, 3, 4)
example_vector
example_list <- list(a=1, b=2, c=3)
example_list
example_vector[1]
example_list['a']
example_list['b']
example_list[c]
c <- 'c'
example_list[c]
example_list[1]
typeof(example_list)
typeof(example_list[1])
typeof(example_list['a'])
typeof(example_vector)
typeof(example_vector[1])
typeof(c(1,2))
typeof(example_list[[1]])
example_list[[1]]
example_list[['a']]
typeof(example_list[['a']])
example_list[c(TRUE, FALSE, TRUE)]
example_list$a
example_list$c
x <- 1:4
print(x)
print(x*x)
print(2*x)
print(2*x + 1)
print(2*x + x*x)
cumsum(x)
print(x)
list_strings = list('tree', 'leaf', 'incredible', 'amazing')
print(list_strings)
nchar(list_strings$1)
nchar(list_strings[[1]])
nchar(list_strings[[-1]])
nchar(list_strings[[4]])
nchar(list_strings)
vector_strings = c('tree', 'leaf', 'incredible', 'amazing')
vector_strings
vector_strings[2]
nchar(vector_strings)
list_strings[1]
typeof(list_strings[1])
typeof(list_strings[[1]])
typeof(nchar(vector_strings))
help("list")
complex_list = list(-15, 1:5, matrix(c(2:6), nrow=2), c('hola', 'mundo'))
complex_list = list(-15, 1:5, matrix(c(2:5), nrow=2), c('hola', 'mundo'))
complex_list
names(complex_list) <- list('a number', 'a list of numbers', 'a matrix', 'a list of words')
print(complex_list)
complex_list$`a number`
complex_list$(a number)
complex_list$'a list of words'
complex_list['a new element'] <- c(12:15)
complex_list['a number']
complex_list$'a new element' <- 4
complex_list
complex_list['a number'] = list(4)
complex_list['a number'] = list(4)
complex_list
complex_list['something'] <- 'else'
complex_list
another_list <- c(1:6)
merged_list <- c(another_list, complex_list)
merged_list
letters
months
month.abb
month.name
a_list = list(a=1, b=2, c=3)
another_list = list(A=5, B=2, C=6)
match(a_list, another_list)
c()
c(c(), 1, 3)
c(c(), 1, NULL)
d <- data.frame(x=c(1, NA, 3))
d
d$x
d[x]
d[1]
d[2]
d[[1]]
d[[2]]
d[[1]][1]
d_1 = data.frame(x=c(1,2)
d_1
d_1
d$x
typeof(d$x)
d$x[is.na()]
help("is.na")
d$x[is.na(d$x)]
d$x[is.na(d$x)] <- 0
d
ggplot2::ggplot(data=mpg, aes(x=displ, y=hwy)) + ggplot2::geom_point()
ggplot2::ggplot(data=ggplot2::mpg, aes(x=displ, y=hwy)) + ggplot2::geom_point()
ggplot2::ggplot(data=ggplot2::mpg, ggplot2::aes(x=displ, y=hwy)) + ggplot2::geom_point()
help('%in%')
1:10 %in% c(1,3,5,9)
1:6 %in% c(1,3,5,9)
2 %in% 2:10
2 %in% 4:10
x = 1:4
c
x
x[1] = NULL
x[3] = NULL
x = list(1:4)
x[3] = NULL
x
x[[3]]=NULL
x
x[[2]]=NULL
x
x[[1]][1]=NULL
x[[1]][1]
x[[1]]
x[[1]]=NULL
x
d <- data.frame(x=1, y=2)
d
d2 <- d
d2$x = 5
d2
d
d$x <- 3
d
d2
d2 <- d
d2
d
d2$x <- 44
d2
d
d2 = d
d2
d
d2$x <- 33
d2
d
d$x <- 12312
d
d2
data <- data.frame(revenue=c(2,1,2),)
data <- data.frame(revenue=c(2,1,2), sort_key=c('b','c','a'), stringsAsFactors = FALSE)
data
- data.frame(revenue = c(2, 1, 2),
sort_key = c('b', 'c', 'a'),
stringsAsFactors = FALSE) #apparently FALSE by default
print(data)
(data)
. <- data
. <- .[order(.$sort_key), , drop = FALSE]
.$ordered_sum_revenue <- cumsum(.$revenue)
.$fraction_revenue_seen <- .$ordered_sum_revenue/sum(.$revenue)
result <- .
print(result)
print(sum(.$revenue))
print(m[, 2])
m <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
print(m[, 2])
print(m[, 2, drop = FALSE]) #to stop structure from being dropped
print(m[, 2])
data %>%
arrange(., sort_key) %>%
mutate(., ordered_sum_revenue = cumsum(revenue)) %>%
mutate(., fra
result <- data %>%
arrange(., sort_key) %>%
mutate(., ordered_sum_revenue = cumsum(revenue)) %>%
mutate(., fraction_revenue_seen = ordered_sum_revenue/sum(revenue))
library('dplyr')
result <- data %>%
arrange(., sort_key) %>%
mutate(., ordered_sum_revenue = cumsum(revenue)) %>%
mutate(., fraction_revenue_seen = ordered_sum_revenue/sum(revenue))
result
.
data
### the data frame class
d <- data.frame(col1 = c(1:3), col2 = c(-1:1))
d$col3 <- d$col1 + d$col2
print(d)
help(setwd)
with data from files -- loading well-structured data
setwd('/home/blap/docs/prog/R/nina-zumel/PDSwR2/UCICar')
uciCar <- read.table(
'car.data.csv', #filename or URL
sep = ',',
header = TRUE, #expect a header line
stringsAsFactors = TRUE #convert string values to factos (default behavior)
)
View(uciCar)
class(uciCar)
class(uciCar$buying)
class(uciCar$persons)
class(uciCar$persons[1]) #typeof is less useful; reveals how the object's storage is implemented
print(uciCar$persons[1])
dim(uciCar)
head(uciCar)
help(class(uciCar))
help(class(uciCar$persons))
str(uciCar)
summary(uciCar)
help(str)
help(summary)
str(uciCar) #gives you structure for an object?
summary(uciCar)
str(uciCar) #gives you structure for an object?
summary(uciCar)
help(saveRDS)
